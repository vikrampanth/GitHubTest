// solution
Store increasing num in one array from start
Store decreasing num in one array from end
    static int bitonicSubArray(int arr[], int n){
        int inc[]=new int[n];
        int dec[]=new int[n];
        dec[n-1]=1;
        inc[0]=1;
        for(int i=1;i<n;i++)
            inc[i] = (arr[i] >= arr[i-1])? inc[i-1] + 1: 1;
        for(int i=n-2;i>0;i--)
            dec[i] = (arr[i] >= arr[i+1])? dec[i+1] + 1: 1;
        int max= 0;
        for(int i=0;i<n;i++)
            max = ( max < (inc[i]+dec[i]-1) ) ? inc[i]+dec[i]-1 : max;
        return max;
    }

//Created by me, normal For sequence, not working completely
    static int bitonicSubArray(int arr[], int n){
        int start=1, flag=0;
        int len=0,k=0;
        for(int i=0;i<n-1;i++){
            if(start>=0 && arr[i]<arr[i+1] && flag==0){
                start++;
                flag=0;
                k=i+1;
            }else if(start >0 && arr[i] == arr[i+1]){
                start++;
                if(flag == 0)
                    flag=0;
                else
                    flag=1;
            }else if(start >0 && arr[i] > arr[i+1]){
                start++;
                flag=2;
            }else{
                if(len<start)
                    len=start;
                start=2;
                flag=0;
                i=k+1;
                k=0;
            }
            System.out.println(start+" "+len+" "+flag+" "+i+" "+k);
        }
        if(len < start)
            len=start;
        return len;
    }

