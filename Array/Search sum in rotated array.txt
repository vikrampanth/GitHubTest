//Recurssion
	static int searchSumRotate(int arr[], int low, int high,int n, int sum){
	    System.out.println("Index - "+low+", "+high);
	    if(sum<arr[low])
	        return -1;
    	if(arr[low]+arr[high] == sum){
            System.out.println("Success - "+low+", "+high);
    	    return 1;
    	}else if(arr[low]+arr[high] < sum){
            low++;
            return searchSumRotate(arr,low, high, n , sum);
    	}else{
    	    high=(high+n-1)%n;
            return searchSumRotate(arr,low, high, n, sum);
    	}
	}
	
//Noraml
bool pairInSortedRotated(int arr[], int n, int x)
{
    // Find the pivot element
    int i;
    for (i=0; i<n-1; i++)
        if (arr[i] > arr[i+1])
            break;
    int l = (i+1)%n;  // l is now index of minimum element
    int r = i;        // r is now index of maximum element
 
    // Keep moving either l or r till they meet
    while (l != r)
    {
         // If we find a pair with sum x, we return true
         if (arr[l] + arr[r] == x)
              return true;
 
         // If current pair sum is less, move to the higher sum
         if (arr[l] + arr[r] < x)
              l = (l + 1)%n;
         else  // Move to the lower sum side
              r = (n + r - 1)%n;
    }
    return false;
}	